# JRuby + Phusion Passenger + Nginx Dockerfile
# High-performance production setup for JRuby applications
# Based on official Passenger Docker patterns

FROM phusion/passenger-ruby32:latest

# Set environment variables
ENV RACK_ENV=production \
    PORT=80 \
    LOG_LEVEL=info \
    # JRuby optimizations
    JRUBY_OPTS="-Xcompile.invokedynamic=true -J-Djnr.ffi.asm.enabled=false" \
    JAVA_OPTS="-Xmx1G -Xms256M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Djnr.netdb.provider=files" \
    MALLOC_ARENA_MAX=2 \
    # Passenger configuration
    PASSENGER_APP_ENV=production \
    PASSENGER_MIN_INSTANCES=2 \
    PASSENGER_MAX_INSTANCES=8 \
    PASSENGER_CONCURRENCY_MODEL=thread \
    PASSENGER_THREAD_COUNT=16

# Create build configuration following official patterns
RUN echo 'export LC_ALL=C' > /pd_build/buildconfig && \
    echo 'export DEBIAN_FRONTEND=noninteractive' >> /pd_build/buildconfig && \
    echo 'DEFAULT_RUBY_GEMS="rake rack"' >> /pd_build/buildconfig && \
    echo 'function minimal_apt_get_install() {' >> /pd_build/buildconfig && \
    echo '    if [[ ! -e /var/lib/apt/lists/lock ]]; then apt-get update; fi' >> /pd_build/buildconfig && \
    echo '    apt-get install -y --no-install-recommends "$@"' >> /pd_build/buildconfig && \
    echo '}' >> /pd_build/buildconfig && \
    echo 'function run() { echo "+ $@" && "$@"; }' >> /pd_build/buildconfig && \
    echo 'function create_rvm_wrapper_script() {' >> /pd_build/buildconfig && \
    echo '    local name="$1" rvm_id="$2" command="$3"' >> /pd_build/buildconfig && \
    echo '    rm -f "/usr/bin/$name"' >> /pd_build/buildconfig && \
    echo '    echo "#!/bin/sh" > "/usr/bin/$name"' >> /pd_build/buildconfig && \
    echo '    echo exec "/usr/local/rvm/wrappers/$rvm_id/$command" '"'"'"$@"'"'"' >> "/usr/bin/$name"' >> /pd_build/buildconfig && \
    echo '    chmod +x "/usr/bin/$name"' >> /pd_build/buildconfig && \
    echo '}' >> /pd_build/buildconfig && \
    mkdir -p /pd_build

# Install JRuby using RVM following official patterns
RUN source /pd_build/buildconfig && \
    # Install Java runtime for JRuby
    run minimal_apt_get_install openjdk-17-jre-headless && \
    run dpkg-reconfigure ca-certificates-java && \
    # Install JRuby 9.4.14.0 through RVM
    RVM_ID="jruby-9.4.14.0" && \
    run /usr/local/rvm/bin/rvm install $RVM_ID && \
    run /usr/local/rvm/bin/rvm-exec $RVM_ID@global gem install $DEFAULT_RUBY_GEMS --no-document && \
    # Create wrapper scripts following official patterns
    run create_rvm_wrapper_script jruby9.4 $RVM_ID ruby && \
    run create_rvm_wrapper_script jruby $RVM_ID ruby && \
    # Make passenger_system_ruby work
    run create_rvm_wrapper_script ruby3.1 $RVM_ID ruby && \
    # Create gem and bundle wrappers
    run create_rvm_wrapper_script jgem $RVM_ID gem && \
    run create_rvm_wrapper_script jbundle $RVM_ID bundle

# Install Ruby utilities and development libraries
RUN source /pd_build/buildconfig && \
    # Install development headers for native libraries
    run minimal_apt_get_install libxml2-dev libxslt1-dev && \
    run minimal_apt_get_install libmysqlclient-dev && \
    run minimal_apt_get_install libsqlite3-dev && \
    run minimal_apt_get_install libpq-dev && \
    run minimal_apt_get_install zlib1g-dev

# Configure Passenger for JRuby
RUN echo 'passenger_ruby /usr/bin/jruby;' > /etc/nginx/conf.d/jruby-passenger.conf

# Precompile Passenger native support for JRuby
RUN if [[ -e /usr/bin/jruby9.4 ]]; then \
        jruby9.4 --dev -S passenger-config build-native-support; \
        setuser app jruby9.4 --dev -S passenger-config build-native-support; \
    fi

# Set working directory
WORKDIR /home/app/webapp

# Copy Gemfile for JRuby-Passenger setup
COPY Gemfile.jruby-passenger Gemfile

# Install gems using JRuby through RVM wrappers
RUN jbundle config set --local path 'vendor/bundle' && \
    jbundle config set --local without 'development test' && \
    jbundle install --jobs=4 --retry=3

# Copy application code
COPY . .

# Remove conflicting lockfiles
RUN rm -f Gemfile.lock

# Copy Nginx site configuration
COPY nginx-jruby.conf /etc/nginx/sites-enabled/webapp.conf
RUN rm -f /etc/nginx/sites-enabled/default

# Copy additional Passenger configuration
COPY passenger-jruby.conf /etc/nginx/conf.d/passenger-jruby.conf

# Create startup script
COPY start-passenger-jruby.sh /etc/my_init.d/99_start_jruby_app.sh
RUN chmod +x /etc/my_init.d/99_start_jruby_app.sh

# Set ownership
RUN chown -R app:app /home/app/webapp

# Create log directory
RUN mkdir -p /var/log/webapp && \
    chown -R app:app /var/log/webapp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=40s \
    CMD curl -f http://localhost:80/health || exit 1

# Enable Nginx service
RUN rm -f /etc/service/nginx/down

# Expose port 80 (Nginx)
EXPOSE 80

# Use the standard Passenger init system
CMD ["/sbin/my_init"]
