# --- Stage 1: Builder image ---
# Use jruby:9.4 instead of jruby:9.4-jdk17 as the latter doesn't exist in Docker Hub
FROM jruby:9.4 AS builder

# Set JRuby-specific environment variables
ENV JRUBY_OPTS="-Xcompile.invokedynamic=true" \
    JAVA_OPTS="-Xmx2G -Xms512M" \
    MALLOC_ARENA_MAX=2

WORKDIR /app

# Install system dependencies needed for some gems
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy JRuby-specific Gemfile and ensure no MRI lockfile interferes
COPY Gemfile.jruby Gemfile
# Note: Explicitly avoid copying Gemfile.lock (MRI-specific) to prevent dependency conflicts

# Install bundler and gems
# Use path vendor/bundle for consistent gem installation  
RUN gem install bundler:2.4.22 && \
    bundle config set --local path 'vendor/bundle' && \
    bundle config set --local without 'development test' && \
    echo "Generating fresh JRuby lockfile..." && \
    bundle install --jobs=4 --retry=3

# Copy application code
COPY . .

# Remove MRI-specific lockfile that conflicts with JRuby dependencies
RUN rm -f Gemfile.lock && echo "Removed conflicting MRI Gemfile.lock"

# --- Stage 2: Runtime image ---
# Use jruby:9.4 as the base runtime image
FROM jruby:9.4

# Runtime environment variables
ENV RACK_ENV=production \
    PORT=8080 \
    LOG_LEVEL=info \
    JRUBY_OPTS="-Xcompile.invokedynamic=true -J-Djnr.ffi.asm.enabled=false" \
    JAVA_OPTS="-Xmx1G -Xms256M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Djnr.netdb.provider=files" \
    MALLOC_ARENA_MAX=2

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install bundler in runtime stage
RUN gem install bundler:2.4.22

# Copy application and dependencies from builder
COPY --from=builder /app /app

# Configure bundler and ensure clean state
RUN rm -rf .bundle/ Gemfile.lock && \
    bundle config set --local path 'vendor/bundle' && \
    bundle config set --local without 'development test' && \
    echo "Bundler configuration:" && bundle config list && \
    echo "Checking installed gems:" && \
    ls -la vendor/bundle/jruby/*/gems/ 2>/dev/null | head -20 || echo "Gems directory not found"

# Note: Running as root for simplicity in development
# In production, consider creating non-root user after ensuring gem access

EXPOSE 8080

# Configure graceful shutdown
STOPSIGNAL SIGTERM

# JRuby-optimized healthcheck
HEALTHCHECK --interval=15s --timeout=5s --retries=3 --start-period=30s \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Use Puma server (better for JRuby than Thin)
# Puma config optimized for JRuby
# Use startup script to handle bundler issues intelligently
CMD ["./start-jruby.sh"]
