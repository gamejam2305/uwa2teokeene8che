# Docker Compose configuration for JRuby + Passenger + Nginx testing
# Fixed version based on official Passenger Docker patterns

version: '3.8'

services:
  jruby-passenger-app:
    build:
      context: ../src
      dockerfile: Dockerfile.jruby-passenger
    image: monitus-jruby-passenger
    container_name: jruby-passenger-test
    ports:
      - "8082:80"  # Map to port 8082 to avoid conflicts
    environment:
      # Application environment
      RACK_ENV: production
      PASSENGER_APP_ENV: production
      
      # JRuby optimization settings
      JRUBY_OPTS: "-Xcompile.invokedynamic=true -J-Djnr.ffi.asm.enabled=false"
      JAVA_OPTS: "-Xmx1G -Xms256M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Djnr.netdb.provider=files"
      MALLOC_ARENA_MAX: "2"
      
      # Passenger scaling configuration
      PASSENGER_MIN_INSTANCES: "2"
      PASSENGER_MAX_INSTANCES: "6"
      PASSENGER_CONCURRENCY_MODEL: "thread"
      PASSENGER_THREAD_COUNT: "12"
      
      # Logging
      LOG_LEVEL: "info"
      DISABLE_REQUEST_LOGGING: "false"
      
    volumes:
      # Optional: mount application code for development
      # - ../src:/home/app/webapp:ro
      
      # Optional: persist logs
      - passenger-logs:/var/log/nginx
      - passenger-app-logs:/var/log/webapp
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
      
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false  # Passenger needs write access for some operations
    
    # Logging
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: jruby-passenger-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-jruby.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - jruby-passenger-app
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: jruby-passenger-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  passenger-logs:
    driver: local
  passenger-app-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: jruby-passenger-network
